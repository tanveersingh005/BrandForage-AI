{"ast":null,"code":"\"use client\";\n\n// src/collapsible.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar COLLAPSIBLE_NAME = \"Collapsible\";\nvar [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\nvar [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);\nvar Collapsible = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    open: openProp,\n    defaultOpen,\n    disabled,\n    onOpenChange,\n    ...collapsibleProps\n  } = props;\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: COLLAPSIBLE_NAME\n  });\n  return /* @__PURE__ */jsx(CollapsibleProvider, {\n    scope: __scopeCollapsible,\n    disabled,\n    contentId: useId(),\n    open,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"data-state\": getState(open),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      ...collapsibleProps,\n      ref: forwardedRef\n    })\n  });\n});\nCollapsible.displayName = COLLAPSIBLE_NAME;\nvar TRIGGER_NAME = \"CollapsibleTrigger\";\nvar CollapsibleTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    ...triggerProps\n  } = props;\n  const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-controls\": context.contentId,\n    \"aria-expanded\": context.open || false,\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    disabled: context.disabled,\n    ...triggerProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n});\nCollapsibleTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"CollapsibleContent\";\nvar CollapsibleContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: _ref => {\n      let {\n        present\n      } = _ref;\n      return /* @__PURE__ */jsx(CollapsibleContentImpl, {\n        ...contentProps,\n        ref: forwardedRef,\n        present\n      });\n    }\n  });\n});\nCollapsibleContent.displayName = CONTENT_NAME;\nvar CollapsibleContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    present,\n    children,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef(0);\n  const width = widthRef.current;\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef(void 0);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName\n      };\n      node.style.transitionDuration = \"0s\";\n      node.style.animationName = \"none\";\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n      setIsPresent(present);\n    }\n  }, [context.open, present]);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    id: context.contentId,\n    hidden: !isOpen,\n    ...contentProps,\n    ref: composedRefs,\n    style: {\n      [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,\n      [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0,\n      ...props.style\n    },\n    children: isOpen && children\n  });\n});\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root = Collapsible;\nvar Trigger = CollapsibleTrigger;\nvar Content = CollapsibleContent;\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger, Content, Root, Trigger, createCollapsibleScope };","map":{"version":3,"names":["React","composeEventHandlers","createContextScope","useControllableState","useLayoutEffect","useComposedRefs","Primitive","Presence","useId","jsx","COLLAPSIBLE_NAME","createCollapsibleContext","createCollapsibleScope","CollapsibleProvider","useCollapsibleContext","Collapsible","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","prop","defaultProp","onChange","caller","scope","contentId","onOpenToggle","useCallback","prevOpen","children","div","getState","ref","displayName","TRIGGER_NAME","CollapsibleTrigger","triggerProps","context","button","type","onClick","CONTENT_NAME","CollapsibleContent","forceMount","contentProps","present","_ref","CollapsibleContentImpl","isPresent","setIsPresent","useState","useRef","composedRefs","heightRef","height","current","widthRef","width","isOpen","isMountAnimationPreventedRef","originalStylesRef","useEffect","rAF","requestAnimationFrame","cancelAnimationFrame","node","transitionDuration","style","animationName","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"sources":["C:\\Users\\harry\\OneDrive\\Desktop\\BrandForage-AI-main\\node_modules\\@radix-ui\\react-collapsible\\src\\collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen ?? false,\n      onChange: onOpenChange,\n      caller: COLLAPSIBLE_NAME,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>(undefined);\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationName = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration!;\n        node.style.animationName = originalStylesRef.current.animationName!;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}